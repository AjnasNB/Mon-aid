/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeneficiaryRegistry__factory>;
    getContractFactory(
      name: "IGovernmentRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernmentRegistry__factory>;
    getContractFactory(
      name: "IJuryStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJuryStaking__factory>;
    getContractFactory(
      name: "GovernmentRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernmentRegistry__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "JuryStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JuryStaking__factory>;
    getContractFactory(
      name: "MockUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSD__factory>;
    getContractFactory(
      name: "MonadRelief",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonadRelief__factory>;
    getContractFactory(
      name: "IBeneficiaryRegistryErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeneficiaryRegistryErc20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MonadReliefERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonadReliefERC20__factory>;
    getContractFactory(
      name: "IBeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeneficiaryRegistry__factory>;
    getContractFactory(
      name: "MonadReliefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonadReliefV2__factory>;

    getContractAt(
      name: "BeneficiaryRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BeneficiaryRegistry>;
    getContractAt(
      name: "IGovernmentRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernmentRegistry>;
    getContractAt(
      name: "IJuryStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IJuryStaking>;
    getContractAt(
      name: "GovernmentRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernmentRegistry>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "JuryStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.JuryStaking>;
    getContractAt(
      name: "MockUSD",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSD>;
    getContractAt(
      name: "MonadRelief",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MonadRelief>;
    getContractAt(
      name: "IBeneficiaryRegistryErc20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeneficiaryRegistryErc20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MonadReliefERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MonadReliefERC20>;
    getContractAt(
      name: "IBeneficiaryRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeneficiaryRegistry>;
    getContractAt(
      name: "MonadReliefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MonadReliefV2>;

    deployContract(
      name: "BeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeneficiaryRegistry>;
    deployContract(
      name: "IGovernmentRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernmentRegistry>;
    deployContract(
      name: "IJuryStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJuryStaking>;
    deployContract(
      name: "GovernmentRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernmentRegistry>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "JuryStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JuryStaking>;
    deployContract(
      name: "MockUSD",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSD>;
    deployContract(
      name: "MonadRelief",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadRelief>;
    deployContract(
      name: "IBeneficiaryRegistryErc20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeneficiaryRegistryErc20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MonadReliefERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadReliefERC20>;
    deployContract(
      name: "IBeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeneficiaryRegistry>;
    deployContract(
      name: "MonadReliefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadReliefV2>;

    deployContract(
      name: "BeneficiaryRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeneficiaryRegistry>;
    deployContract(
      name: "IGovernmentRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernmentRegistry>;
    deployContract(
      name: "IJuryStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJuryStaking>;
    deployContract(
      name: "GovernmentRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernmentRegistry>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "JuryStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JuryStaking>;
    deployContract(
      name: "MockUSD",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSD>;
    deployContract(
      name: "MonadRelief",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadRelief>;
    deployContract(
      name: "IBeneficiaryRegistryErc20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeneficiaryRegistryErc20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MonadReliefERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadReliefERC20>;
    deployContract(
      name: "IBeneficiaryRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeneficiaryRegistry>;
    deployContract(
      name: "MonadReliefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MonadReliefV2>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
