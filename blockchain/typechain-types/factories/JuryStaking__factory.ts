/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { JuryStaking, JuryStakingInterface } from "../JuryStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gov",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "juror",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Slashed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "juror",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "juror",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "juror",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "claimId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approve",
        type: "bool",
      },
    ],
    name: "Vote",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "claimId",
        type: "bytes32",
      },
    ],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "jurors",
    outputs: [
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "requestUnstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "claimId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
    ],
    name: "setQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "juror",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "slash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tallies",
    outputs: [
      {
        internalType: "uint256",
        name: "yes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "no",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "decided",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "claimId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "approve",
        type: "bool",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f6109dd38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600280546001600160a01b03191691909117905560405161094d90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c90816302fb4d851461073c57816323095721146105c05781632d13e7731461052d578163346bec3a146104d15781633a4b66f1146104105781635aa6e675146103db578163817b1cd2146103bc57816392584d80146102d65781639f2ce678146100e5575063dca5f6b01461009157600080fd5b346100e15760206003193601126100e157809173ffffffffffffffffffffffffffffffffffffffff6100c16107de565b168152806020522060ff6001825492015416825191825215156020820152f35b5080fd5b8383346100e157806003193601126100e157823590602435801515918282036102d25733855260209185835260ff600183882001541615610290578486526003835261013a60ff6003848920015416156108cc565b81518381018681523360601b8483015260348252606082019082821067ffffffffffffffff83111761027d57818552825190209182895289865260ff858a20541661023d5750508652868352818620805460ff19166001179055156101f65783855260038252808520805490600182018092116101e3577ffcb0e8de36025fceccb6b01d29d347bd00ededfee8d324fc4d7a2f8763f3219f9495969750555b519283523392a380f35b60248760118a634e487b7160e01b835252fd5b83855260038252600181862001805490600182018092116101e3577ffcb0e8de36025fceccb6b01d29d347bd00ededfee8d324fc4d7a2f8763f3219f9495969750556101d9565b907f766f74656400000000000000000000000000000000000000000000000000000060a46064938862461bcd60e51b855285820152600560848201520152fd5b60248960418c634e487b7160e01b835252fd5b6064878484519162461bcd60e51b8352820152600960248201527f6e6f74206a75726f7200000000000000000000000000000000000000000000006044820152fd5b8480fd5b9050346103b85760206003193601126103b857803583526003602052818320600381019283549261030a60ff8516156108cc565b825491600184015493600261031f86866108bf565b9101548091101590816103ae575b501561036b5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216911160081b61ff001617600117905580f35b906020606492519162461bcd60e51b8352820152600960248201527f6e6f2071756f72756d00000000000000000000000000000000000000000000006044820152fd5b905015153861032d565b8280fd5b5050346100e157816003193601126100e1576020906001549051908152f35b5050346100e157816003193601126100e15760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b9050826003193601126103b857341561048f5750338252816020528082206104393482546108bf565b905533825281602052600181832001600160ff1982541617905561045f346001546108bf565b600155513481527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a280f35b6020606492519162461bcd60e51b8352820152600860248201527f6e6f2076616c75650000000000000000000000000000000000000000000000006044820152fd5b9050346103b85760206003193601126103b8578160a09360ff92358152600360205220918254926001810154916003600283015492015492815195865260208601528401528181161515606084015260081c1615156080820152f35b919050346103b857806003193601126103b8576024359161056773ffffffffffffffffffffffffffffffffffffffff600254163314610806565b821561057e57358352600360205282206002015580f35b6020606492519162461bcd60e51b8352820152600860248201527f71756f72756d3d300000000000000000000000000000000000000000000000006044820152fd5b919050346103b85760206003193601126103b85781359133845283602052818420906106008483548181101580610733575b6105fb90610851565b61089c565b825561060e8460015461089c565b6001558480808087335af13d1561072e5767ffffffffffffffff3d81811161071b57855191601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011683019081118382101761070857865281528660203d92013e5b156106c557508054156106b4575b50519081527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560203392a280f35b60010160ff19815416905538610686565b606490602084519162461bcd60e51b8352820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b602489604187634e487b7160e01b835252fd5b602488604186634e487b7160e01b835252fd5b610678565b508115156105f2565b5050346100e157806003193601126100e1577f4ed05e9673c26d2ed44f7ef6a7f2942df0ee3b5e1e17db4b99f9dcd261a339cd60206107796107de565b6024359073ffffffffffffffffffffffffffffffffffffffff906107a282600254163314610806565b16938486528583528086206107c58382548181101580610733576105fb90610851565b90556107d38260015461089c565b60015551908152a280f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361080157565b600080fd5b1561080d57565b606460405162461bcd60e51b815260206004820152600860248201527f6f6e6c7920676f760000000000000000000000000000000000000000000000006044820152fd5b1561085857565b606460405162461bcd60e51b815260206004820152600a60248201527f62616420616d6f756e74000000000000000000000000000000000000000000006044820152fd5b919082039182116108a957565b634e487b7160e01b600052601160045260246000fd5b919082018092116108a957565b156108d357565b606460405162461bcd60e51b815260206004820152600760248201527f64656369646564000000000000000000000000000000000000000000000000006044820152fdfea26469706673582212206b59546b3232f8aaa5e2f92fcbdd6bcef3013a45a3fe987d2e2f9fb858f0d76a64736f6c63430008180033";

type JuryStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JuryStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class JuryStaking__factory extends ContractFactory {
  constructor(...args: JuryStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _gov: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_gov, overrides || {});
  }
  override deploy(
    _gov: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_gov, overrides || {}) as Promise<
      JuryStaking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): JuryStaking__factory {
    return super.connect(runner) as JuryStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JuryStakingInterface {
    return new Interface(_abi) as JuryStakingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): JuryStaking {
    return new Contract(address, _abi, runner) as unknown as JuryStaking;
  }
}
