/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface JuryStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalize"
      | "governance"
      | "jurors"
      | "requestUnstake"
      | "setQuorum"
      | "slash"
      | "stake"
      | "tallies"
      | "totalStaked"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Slashed" | "Staked" | "Unstaked" | "Vote"
  ): EventFragment;

  encodeFunctionData(functionFragment: "finalize", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jurors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "requestUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "tallies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jurors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tallies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace SlashedEvent {
  export type InputTuple = [juror: AddressLike, amount: BigNumberish];
  export type OutputTuple = [juror: string, amount: bigint];
  export interface OutputObject {
    juror: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [juror: AddressLike, amount: BigNumberish];
  export type OutputTuple = [juror: string, amount: bigint];
  export interface OutputObject {
    juror: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [juror: AddressLike, amount: BigNumberish];
  export type OutputTuple = [juror: string, amount: bigint];
  export interface OutputObject {
    juror: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteEvent {
  export type InputTuple = [
    juror: AddressLike,
    claimId: BytesLike,
    approve: boolean
  ];
  export type OutputTuple = [juror: string, claimId: string, approve: boolean];
  export interface OutputObject {
    juror: string;
    claimId: string;
    approve: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JuryStaking extends BaseContract {
  connect(runner?: ContractRunner | null): JuryStaking;
  waitForDeployment(): Promise<this>;

  interface: JuryStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalize: TypedContractMethod<[claimId: BytesLike], [void], "nonpayable">;

  governance: TypedContractMethod<[], [string], "view">;

  jurors: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { stake: bigint; active: boolean }],
    "view"
  >;

  requestUnstake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setQuorum: TypedContractMethod<
    [claimId: BytesLike, quorum: BigNumberish],
    [void],
    "nonpayable"
  >;

  slash: TypedContractMethod<
    [juror: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[], [void], "payable">;

  tallies: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        yes: bigint;
        no: bigint;
        quorum: bigint;
        decided: boolean;
        approved: boolean;
      }
    ],
    "view"
  >;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<
    [claimId: BytesLike, approve: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[claimId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jurors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { stake: bigint; active: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestUnstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQuorum"
  ): TypedContractMethod<
    [claimId: BytesLike, quorum: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slash"
  ): TypedContractMethod<
    [juror: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "tallies"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        yes: bigint;
        no: bigint;
        quorum: bigint;
        decided: boolean;
        approved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [claimId: BytesLike, approve: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Slashed"
  ): TypedContractEvent<
    SlashedEvent.InputTuple,
    SlashedEvent.OutputTuple,
    SlashedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;
  getEvent(
    key: "Vote"
  ): TypedContractEvent<
    VoteEvent.InputTuple,
    VoteEvent.OutputTuple,
    VoteEvent.OutputObject
  >;

  filters: {
    "Slashed(address,uint256)": TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
    Slashed: TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;

    "Vote(address,bytes32,bool)": TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;
    Vote: TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;
  };
}
