/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MonadReliefERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "donate"
      | "donorHasDonated"
      | "governance"
      | "registry"
      | "stablecoin"
      | "totalDisbursed"
      | "totalDonationCount"
      | "totalDonations"
      | "uniqueDonorCount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Disbursement" | "Donation"): EventFragment;

  encodeFunctionData(
    functionFragment: "donate",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donorHasDonated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDisbursed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueDonorCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donorHasDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDisbursed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueDonorCount",
    data: BytesLike
  ): Result;
}

export namespace DisbursementEvent {
  export type InputTuple = [
    beneficiaryId: BytesLike,
    wallet: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiaryId: string,
    wallet: string,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiaryId: string;
    wallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    beneficiaryId: BytesLike
  ];
  export type OutputTuple = [
    donor: string,
    amount: bigint,
    beneficiaryId: string
  ];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    beneficiaryId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MonadReliefERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): MonadReliefERC20;
  waitForDeployment(): Promise<this>;

  interface: MonadReliefERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  donate: TypedContractMethod<
    [beneficiaryId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  donorHasDonated: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  stablecoin: TypedContractMethod<[], [string], "view">;

  totalDisbursed: TypedContractMethod<[], [bigint], "view">;

  totalDonationCount: TypedContractMethod<[], [bigint], "view">;

  totalDonations: TypedContractMethod<[], [bigint], "view">;

  uniqueDonorCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [beneficiaryId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donorHasDonated"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalDisbursed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniqueDonorCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Disbursement"
  ): TypedContractEvent<
    DisbursementEvent.InputTuple,
    DisbursementEvent.OutputTuple,
    DisbursementEvent.OutputObject
  >;
  getEvent(
    key: "Donation"
  ): TypedContractEvent<
    DonationEvent.InputTuple,
    DonationEvent.OutputTuple,
    DonationEvent.OutputObject
  >;

  filters: {
    "Disbursement(bytes32,address,uint256)": TypedContractEvent<
      DisbursementEvent.InputTuple,
      DisbursementEvent.OutputTuple,
      DisbursementEvent.OutputObject
    >;
    Disbursement: TypedContractEvent<
      DisbursementEvent.InputTuple,
      DisbursementEvent.OutputTuple,
      DisbursementEvent.OutputObject
    >;

    "Donation(address,uint256,bytes32)": TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
    Donation: TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
  };
}
