/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BeneficiaryRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claims"
      | "govRegistry"
      | "governance"
      | "governmentApprove"
      | "isApproved"
      | "jury"
      | "refreshJury"
      | "submitClaim"
      | "uniqueness"
      | "walletOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimSubmitted" | "GovApproved" | "JuryFinalized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "claims", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "govRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governmentApprove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "jury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshJury",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike, AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueness",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "walletOf", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governmentApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshJury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniqueness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "walletOf", data: BytesLike): Result;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    beneficiaryId: BytesLike,
    wallet: AddressLike,
    disasterId: BytesLike,
    docHash: BytesLike
  ];
  export type OutputTuple = [
    beneficiaryId: string,
    wallet: string,
    disasterId: string,
    docHash: string
  ];
  export interface OutputObject {
    beneficiaryId: string;
    wallet: string;
    disasterId: string;
    docHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovApprovedEvent {
  export type InputTuple = [beneficiaryId: BytesLike, official: AddressLike];
  export type OutputTuple = [beneficiaryId: string, official: string];
  export interface OutputObject {
    beneficiaryId: string;
    official: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JuryFinalizedEvent {
  export type InputTuple = [beneficiaryId: BytesLike, approved: boolean];
  export type OutputTuple = [beneficiaryId: string, approved: boolean];
  export interface OutputObject {
    beneficiaryId: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BeneficiaryRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): BeneficiaryRegistry;
  waitForDeployment(): Promise<this>;

  interface: BeneficiaryRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claims: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, boolean, boolean, boolean] & {
        wallet: string;
        disasterId: string;
        docHash: string;
        govApproved: boolean;
        juryApproved: boolean;
        active: boolean;
      }
    ],
    "view"
  >;

  govRegistry: TypedContractMethod<[], [string], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  governmentApprove: TypedContractMethod<
    [beneficiaryId: BytesLike],
    [void],
    "nonpayable"
  >;

  isApproved: TypedContractMethod<
    [beneficiaryId: BytesLike],
    [boolean],
    "view"
  >;

  jury: TypedContractMethod<[], [string], "view">;

  refreshJury: TypedContractMethod<
    [beneficiaryId: BytesLike, claimId: BytesLike],
    [void],
    "nonpayable"
  >;

  submitClaim: TypedContractMethod<
    [
      beneficiaryId: BytesLike,
      wallet: AddressLike,
      disasterId: BytesLike,
      userUniqueHash: BytesLike,
      docHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  uniqueness: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  walletOf: TypedContractMethod<[beneficiaryId: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, boolean, boolean, boolean] & {
        wallet: string;
        disasterId: string;
        docHash: string;
        govApproved: boolean;
        juryApproved: boolean;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "govRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governmentApprove"
  ): TypedContractMethod<[beneficiaryId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApproved"
  ): TypedContractMethod<[beneficiaryId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "jury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refreshJury"
  ): TypedContractMethod<
    [beneficiaryId: BytesLike, claimId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [
      beneficiaryId: BytesLike,
      wallet: AddressLike,
      disasterId: BytesLike,
      userUniqueHash: BytesLike,
      docHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniqueness"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "walletOf"
  ): TypedContractMethod<[beneficiaryId: BytesLike], [string], "view">;

  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "GovApproved"
  ): TypedContractEvent<
    GovApprovedEvent.InputTuple,
    GovApprovedEvent.OutputTuple,
    GovApprovedEvent.OutputObject
  >;
  getEvent(
    key: "JuryFinalized"
  ): TypedContractEvent<
    JuryFinalizedEvent.InputTuple,
    JuryFinalizedEvent.OutputTuple,
    JuryFinalizedEvent.OutputObject
  >;

  filters: {
    "ClaimSubmitted(bytes32,address,bytes32,bytes32)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "GovApproved(bytes32,address)": TypedContractEvent<
      GovApprovedEvent.InputTuple,
      GovApprovedEvent.OutputTuple,
      GovApprovedEvent.OutputObject
    >;
    GovApproved: TypedContractEvent<
      GovApprovedEvent.InputTuple,
      GovApprovedEvent.OutputTuple,
      GovApprovedEvent.OutputObject
    >;

    "JuryFinalized(bytes32,bool)": TypedContractEvent<
      JuryFinalizedEvent.InputTuple,
      JuryFinalizedEvent.OutputTuple,
      JuryFinalizedEvent.OutputObject
    >;
    JuryFinalized: TypedContractEvent<
      JuryFinalizedEvent.InputTuple,
      JuryFinalizedEvent.OutputTuple,
      JuryFinalizedEvent.OutputObject
    >;
  };
}
